"use strict";var express=require("express"),Sequelize=require("sequelize"),User=require("../models").User,Course=require("../models").Course,_require=require("express-validator/check"),check=_require.check,validationResult=_require.validationResult,bcryptjs=require("bcryptjs"),auth=require("basic-auth"),colors=require("colors/safe"),router=express.Router();function asyncHandler(n){return function(r,t,s){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(n(r,t,s));case 3:e.next=8;break;case 5:e.prev=5,e.t0=e.catch(0),t.status(500).send(e.t0);case 8:case"end":return e.stop()}},null,null,[[0,5]])}}router.get("/",function(e,r,t){r.json({message:"hello into the api route"})});var authenticateUser=asyncHandler(function(r,t,s){var n,a,u,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=null,e.next=3,regeneratorRuntime.awrap(User.findAll({attributes:{exclude:["createdAt","updatedAt"]}}));case 3:a=e.sent,(u=auth(r))?(o=a.find(function(e){return e.emailAddress===u.name}))?bcryptjs.compareSync(u.pass,o.password)?(console.log("Authentication successful for username: ".concat(o)),r.currentUser=o):n="Authentication failure for username: ".concat(o.username):n="User not found for username: ".concat(u.name):n="Auth header not found",n?(console.warn(n),t.status(401).json({message:"Access Denied"})):s();case 7:case"end":return e.stop()}})});router.get("/users",authenticateUser,asyncHandler(function(r,t){var s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return s=r.currentUser,t.json({firstName:s.firstName,lastName:s.lastName,emailAddress:s.emailAddress}),e.abrupt("return",t.status(200).end());case 3:case"end":return e.stop()}})})),router.post("/users",[check("firstName").exists({checkNull:!0,checkFalsy:!0}).withMessage('Please provide a value for "firstName"'),check("lastName").exists({checkNull:!0,checkFalsy:!0}).withMessage('Please provide a value for "lastName"'),check("emailAddress").exists({checkNull:!0,checkFalsy:!0}).withMessage('Please provide a value for "password"'),check("password").exists({checkNull:!0,checkFalsy:!0}).withMessage('Please provide a value for "password"')],asyncHandler(function(r,t){var s,n,a,u;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if((s=validationResult(r)).isEmpty()){e.next=4;break}return n=s.array().map(function(e){return e.msg}),e.abrupt("return",t.status(400).json({errors:n}));case 4:return(a=r.body).password=bcryptjs.hashSync(a.password),u=User.build({firstName:r.body.firstName,lastName:r.body.lastName,emailAddress:r.body.emailAddress,password:a.password}),e.next=9,regeneratorRuntime.awrap(u.save());case 9:return t.location="/",console.log(t.location),e.abrupt("return",t.status(201).end());case 12:case"end":return e.stop()}})})),router.get("/courses",asyncHandler(function(e,r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(Course.findAll({attributes:{exclude:["createdAt","updatedAt"]},include:[{model:User,attributes:{exclude:["password","createdAt","updatedAt"]}}]}));case 2:t=e.sent,r.json({courses:t}),r.status(200).end();case 5:case"end":return e.stop()}})})),router.get("/courses/:id",asyncHandler(function(r,t){var s,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(Course.findOne({attributes:{exclude:["createdAt","updatedAt"]},where:{id:r.params.id}}));case 2:if(null!=(s=e.sent))return e.next=6,regeneratorRuntime.awrap(User.findOne({attributes:{exclude:["createdAt","updatedAt","password"]},where:{id:s.dataValues.userId}}));e.next=10;break;case 6:n=e.sent,t.json({course:s,owner:n}),e.next=11;break;case 10:t.status(404).json({message:"Course not found."});case 11:case"end":return e.stop()}})}));var checkCourse=[check("title").exists({checkNull:!0,checkFalsy:!0}).withMessage('Please provide a value for "title"'),check("description").exists({checkNull:!0,checkFalsy:!0}).withMessage('Please provide a value for "description"')];router.post("/courses",authenticateUser,checkCourse,asyncHandler(function(r,t){var s,n,a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if((s=validationResult(r)).isEmpty()){e.next=4;break}return n=s.array().map(function(e){return e.msg}),e.abrupt("return",t.status(400).json({errors:n}));case 4:return a=Course.build({title:r.body.title,description:r.body.description,estimatedTime:r.body.estimatedTime,materialsNeeded:r.body.materialsNeeded,userId:r.body.userId}),e.next=7,regeneratorRuntime.awrap(a.save());case 7:return t.location="/courses/".concat(a.id),console.log(t.location),e.abrupt("return",t.status(201).end());case 10:case"end":return e.stop()}})})),router.put("/courses/:id",authenticateUser,checkCourse,asyncHandler(function(t,s){var r,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(console.log(colors.red(t.currentUser)),(r=validationResult(t)).isEmpty()){e.next=5;break}return n=r.array().map(function(e){return e.msg}),e.abrupt("return",s.status(400).json({errors:n}));case 5:return e.next=7,regeneratorRuntime.awrap(Course.findOne({where:{id:t.params.id}}).then(function(e){if(!e)throw new Error("No Course found");if(0==(e.userId==t.currentUser.id))throw s.status(403),new Error("user is not permited to modify this course ");console.log("retrieved Course ".concat(JSON.stringify(e,null,2)));var r={title:t.body.title,description:t.body.description,estimatedTime:t.body.estimatedTime,materialsNeeded:t.body.materialsNeeded,userId:t.body.userId};e.update(r).then(function(e){console.log("updated Course ".concat(JSON.stringify(e,null,2)))})}).catch(function(e){s.json({message:e.message})}));case 7:return e.abrupt("return",s.status(204).end());case 8:case"end":return e.stop()}})})),router.delete("/courses/:id",authenticateUser,asyncHandler(function(r,t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(Course.findOne({where:{id:r.params.id}}).then(function(e){if(!e)throw new Error("No Course found");if(0==(e.userId==r.currentUser.id))throw t.status(403),new Error("user is not permited to delete this course ");console.log("retrieved Course ".concat(JSON.stringify(e,null,2))),e.destroy().then(function(e){console.log("deleted Course ".concat(JSON.stringify(e,null,2)))})}).catch(function(e){t.json({message:e.message})}));case 2:return e.abrupt("return",t.status(204).end());case 3:case"end":return e.stop()}})})),module.exports=router;